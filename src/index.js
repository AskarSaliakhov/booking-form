const main = document.querySelector('.main');
const form = document.createElement('div');
form.className = 'form';

const title = document.createElement('p');
title.id = 'title';
title.textContent = '–§–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è';

//–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const popup = document.createElement('div');
popup.id = 'popup';
const titleData = document.createElement('p');
titleData.id = 'title-data';
popup.append(titleData);


//–ë–ê–®–ù–ò
const towers = document.createElement('div');
towers.className = 'towers';
const selectTowers = document.createElement('select');
const towerA = document.createElement('option');
towerA.textContent = '–ë–∞—à–Ω—è –ê';
towerA.value = '–ê';
const towerB = document.createElement('option');
towerB.textContent = '–ë–∞—à–Ω—è –ë';
towerB.value = '–ë';
const optionTowerHidden = document.createElement('option');
optionTowerHidden.hidden = true;
optionTowerHidden.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—à–Ω—é';
selectTowers.append(optionTowerHidden, towerA, towerB);


//–≠–¢–ê–ñ–ò
const floors = document.createElement('div');
floors.className = 'floors';
const selectFloors = document.createElement('select');
const FLOORS_COUNT = 27;
const optionFloorHidden = document.createElement('option');
optionFloorHidden.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂';
optionFloorHidden.hidden = true;
selectFloors.append(optionFloorHidden);
for (let i = 3; i <= FLOORS_COUNT; i++) {
    const optionFloor = document.createElement('option');
    optionFloor.className = 'floor' + i;
    optionFloor.textContent = optionFloor.value = '–≠—Ç–∞–∂ ' + i;
    selectFloors.append(optionFloor);
}

//–ü–ï–†–ï–ì–û–í–û–†–ö–ò
const meetingRooms = document.createElement('div');
meetingRooms.className = 'meetingRooms';
const optionMeetingRoomsHidden = document.createElement('option');
optionMeetingRoomsHidden.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É';
optionMeetingRoomsHidden.hidden = true;
const selectMeetingRooms = document.createElement('select');
selectMeetingRooms.append(optionMeetingRoomsHidden);
const MEETING_ROOMS_COUNT = 10;
for (let i = 1; i <= MEETING_ROOMS_COUNT; i++) {
    const optionMeetingRoom = document.createElement('option');
    optionMeetingRoom.className = 'meeting__room' + i;
    optionMeetingRoom.textContent = optionMeetingRoom.value = '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞ ' + i;
    selectMeetingRooms.append(optionMeetingRoom);
}

//–í—Ä–µ–º—è
const inputChooseDay = document.createElement('input');
inputChooseDay.className = 'choose__day';
inputChooseDay.placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å';

const titleChooseStart = document.createElement('p');
titleChooseStart.textContent = '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞';

const inputChooseStart = document.createElement('input');
inputChooseStart.classList.add('choose__time', 'start__time');
inputChooseStart.type = 'time';

const titleChooseFinish = document.createElement('p');
titleChooseFinish.textContent = '–û–∫–æ–Ω—á–∞–Ω–∏–µ';

const inputChooseFinish = document.createElement('input');
inputChooseFinish.placeholder = '–í–≤–µ–¥–∏—Ç–µ';
inputChooseFinish.classList.add('choose__time', 'finish__day');
inputChooseFinish.type = 'time';

const hours = document.createElement('div');
hours.className = 'hours';
hours.append(inputChooseStart, titleChooseStart, inputChooseFinish, titleChooseFinish);

const chooseStartHour = document.createElement('div');
chooseStartHour.className = 'choose__start__hour';
chooseStartHour.append(titleChooseStart, inputChooseStart);

const chooseFinishHour = document.createElement('div');
chooseFinishHour.className = 'choose__finish__hour';
chooseFinishHour.append(titleChooseFinish, inputChooseFinish);

hours.append(chooseStartHour, chooseFinishHour);

const allTimes = document.createElement('div')
allTimes.className = 'times'
allTimes.append(inputChooseDay, hours)
new Datepicker(inputChooseDay, {
        min: (function () {
            let date = new Date();
            date.setDate(date.getDate() - 1);
            return date;
        })(),
    }
);

//–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
const comment = document.createElement('div');
comment.className = 'comment';

const textareaComment = document.createElement('textarea');
textareaComment.className = 'comment';
textareaComment.placeholder = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';


//–°–º–∞–π–ª–∏–∫–∏
const buttonOpenSmiles = document.createElement('button');
buttonOpenSmiles.className = 'btn__open';

const divOpenSmiles = document.createElement('div');
divOpenSmiles.className = 'open__smiles';
divOpenSmiles.style.display='none';
const emojies = ["üòÉ", "üòÅ", "üòÇ", "ü§£", "üòü", "üôÅ", "ü•∫", "üòé", "üíó", "üëç", "üëé", "üëå", "‚úÖ", "‚ùì", "‚ùó", "üî•", "üëà", "üëâ", "üëÜ", "üëá"];


for (let i = 0; i < emojies.length; i++) {
    const smile = document.createElement('span')
    smile.textContent = emojies[i];
    smile.className = 'smile';
    divOpenSmiles.append(smile);
    smile.addEventListener('click', () => {
        textareaComment.value = textareaComment.value.slice(0, textareaComment.selectionStart) +
            emojies[i] +
            textareaComment.value.slice(textareaComment.selectionStart + 1, textareaComment.value.length)
    })
}


function closeEmojies() {
    return divOpenSmiles.style.display = 'none';
}
function openEmojies() {
    return divOpenSmiles.style.display = 'block';
}

//–∑–∞–∫—Ä—ã—Ç—å Esc-–æ–º

document.addEventListener('keydown', function(e) {
    if( e.keyCode === 27 ){
        count=0;
        closeEmojies();
    }
});

//–æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å —Å–º–∞–π–ª–∏–∫–∏
let count=0
buttonOpenSmiles.addEventListener('click',()=>{
    count++;
    if (count%2===1) {
        openEmojies();
    }
    else {
        closeEmojies();
    }
})

comment.append(textareaComment, buttonOpenSmiles, divOpenSmiles);


//–ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏
const buttons = document.createElement('div');
buttons.className = 'buttons';
const buttonSend = document.createElement('button');
buttonSend.classList.add('btn', 'btn__send');
buttonSend.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
const buttonCleanAll = document.createElement('button');
buttonCleanAll.classList.add('btn', 'btn__clean');
buttonCleanAll.textContent = '–û—á–∏—Å—Ç–∏—Ç—å';
buttons.append(buttonCleanAll, buttonSend);


const allSelects = [selectTowers, selectFloors, selectMeetingRooms];
const allTimesInputs = [inputChooseDay, inputChooseStart, inputChooseFinish];


buttonSend.addEventListener('click', () => {
    popup.className = 'show'
    setTimeout(function () {
        popup.className = popup.className.replace("show", "");
    }, 5000);

    const data = {
        tower: selectTowers.options[selectTowers.selectedIndex].value,
        floor: selectFloors.options[selectFloors.selectedIndex].value,
        meetingRoom: selectMeetingRooms.options[selectMeetingRooms.selectedIndex].value,
        day: inputChooseDay.value,
        start: inputChooseStart.value,
        finish: inputChooseFinish.value,
        comment: textareaComment.value,
    }

    allSelects.forEach(element => {
        if (element.selectedIndex !== 0) {
            element.classList.remove('invalid__data');
        } else {
            element.classList.add('invalid__data');
        }
    })

    allTimesInputs.forEach(element => {
        if (element.value !== '') {
            element.classList.remove('invalid__data');
        } else {
            element.classList.add('invalid__data');
        }
    })

    if (selectTowers.selectedIndex !== 0 &&
        selectFloors.selectedIndex !== 0 &&
        selectMeetingRooms.selectedIndex !== 0 &&
        inputChooseDay.value !== '' &&
        inputChooseStart.value !== '' &&
        inputChooseFinish.value !== '' &&
        !(inputChooseStart.value > inputChooseFinish.value))
    {
        titleData.textContent = '–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞';
        popup.classList.add('right__data__popup');
        console.log(JSON.stringify(data));
    } else if (inputChooseStart.value > inputChooseFinish.value) {
        titleData.textContent = '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–æ–ª—å—à–µ —á–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è';
        popup.classList.add('invalid__data__popup');
        inputChooseStart.className = inputChooseFinish.className = 'invalid__data';
    } else {
        titleData.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è';
        popup.classList.add('invalid__data__popup');
    }

})


buttonCleanAll.addEventListener('click', () => {
    inputChooseDay.value = '';
    textareaComment.value = '';
    selectFloors.selectedIndex = selectTowers.selectedIndex = selectMeetingRooms.selectedIndex = 0;
    inputChooseStart.value = '';
    inputChooseFinish.value = '';

    allSelects.forEach(element => {
        element.classList.remove('invalid__data');
    })
    allTimesInputs.forEach(element => {
        element.classList.remove('invalid__data');
    })
})

towers.append(selectTowers);
floors.append(selectFloors);
meetingRooms.append(selectMeetingRooms);

form.append(title, towers, floors, meetingRooms, allTimes, comment, buttons);

main.append(form, popup);

